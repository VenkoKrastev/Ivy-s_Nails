// <auto-generated />
using System;
using IvysNails.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IvysNails.Infrastructure.Migrations
{
    [DbContext(typeof(IvyNailsDbContext))]
    [Migration("20240416172955_AllNewMigration")]
    partial class AllNewMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IvysNails.Infrastructure.Data.Models.Appointment", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasComment("The current Product's Identifier");

                    b.HasKey("ServiceId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("IvysNails.Infrastructure.Data.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The current user's Identifier");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("IvysNails.Infrastructure.Data.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("IvysNails.Infrastructure.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The current Product's Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasComment("Product details");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The current picture of product");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of product");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The current Products Price");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int")
                        .HasComment("Available quantity of the product");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Details = "Цвят: Сияйно фуксия-розово. Fuchsia in Love L'Oxygéné от Nailberry внася в живота ви сияйна цветна радост и подсилва всяко облекло със своя сияен цвят. Брилянтният лилаво-розов нюанс може да се нанася без усилие и без ивици, с особено дълготраен резултат. Гамата лакове за нокти L'Oxygéné използва патентована технология, насочена към по-здравословна форма на маникюр. Резултатът е дишащи, водопропускливи и съдържащи кислород лакове, които са особено нежни към ноктите ви.Продуктът е веганнски, без тестове с животни и халал и без глутен.",
                            ImageUrl = "https://www.google.com/imgres?q=%D0%BB%D0%B0%D0%BA%20%D0%B7%D0%B0%20%D0%BD%D0%BE%D0%BA%D1%82%D0%B8&imgurl=https%3A%2F%2Fco.nice-cdn.com%2Fupload%2Fimage%2Fproduct%2Flarge%2Fdefault%2Fnailberry-lak-za-nokti-fuchsia-in-love-loxygene-15-ml-447434-bg.jpg&imgrefurl=https%3A%2F%2Fwww.cosmeterie.bg%2Fnailberry%2Flak-za-nokti-fuchsia-in-love-loxygene&docid=_uoZbQhPXkWwjM&tbnid=jLTDHbnIasedpM&vet=12ahUKEwiQq7Pm_8GFAxVIQfEDHblaDtwQM3oECG4QAA..i&w=1920&h=1920&hcb=2&ved=2ahUKEwiQq7Pm_8GFAxVIQfEDHblaDtwQM3oECG4QAA",
                            Name = "NAILBERRY",
                            Price = 42.09m,
                            ProductCategoryId = 3,
                            StockQuantity = 7
                        },
                        new
                        {
                            Id = 2,
                            Details = "Подходящ за боядисана или коса на кичури. Предпазва интензивността на цвета и го защитава от избледняване. Косата е здрава, лъскава и сияйна",
                            ImageUrl = "https://www.google.com/imgres?q=%D1%88%D0%B0%D0%BC%D0%BF%D0%BE%D0%B0%D0%BD%20%D0%B7%D0%B0%20%D0%BA%D0%BE%D1%81%D0%B0&imgurl=https%3A%2F%2Fgalen.bg%2Fmedia%2Fcatalog%2Fproduct%2Fcache%2F4587ace2ea33d73df121dcde1c6b054a%2F5%2F2-45491-29207%2Fsyoss-color-750-.jpg&imgrefurl=https%3A%2F%2Fgalen.bg%2Fsayas-shampoan-zashtita-na-tsveta-750ml&docid=2D0jEJAd2JKyoM&tbnid=CbN5yHRdk-GWxM&vet=12ahUKEwiE2L_M_MGFAxVTR_EDHeQNANoQM3oECGsQAA..i&w=700&h=700&hcb=2&ved=2ahUKEwiE2L_M_MGFAxVTR_EDHeQNANoQM3oECGsQAA",
                            Name = "SYOSS",
                            Price = 13.90m,
                            ProductCategoryId = 1,
                            StockQuantity = 20
                        },
                        new
                        {
                            Id = 1,
                            Details = "Реконструиращ шампоан за слаба и безжизнена коса 250 мл",
                            ImageUrl = "https://www.google.com/imgres?q=%D1%88%D0%B0%D0%BC%D0%BF%D0%BE%D0%B0%D0%BD%20%D0%B7%D0%B0%20%D0%BA%D0%BE%D1%81%D0%B0&imgurl=https%3A%2F%2Fwww.zlatnaribka.com%2Fimage%2Fcache%2Fcatalog%2F2019_Products_Pictures%2FKerastase%2FForce%2520Architecte%2FKerastase-Bain-Force-Architecte-shampoo-700-min-700x700.jpg&imgrefurl=http%3A%2F%2Fwww.zlatnaribka.com%2Fshampoan-za-silno-iztoshtena-i-nakasana-kosa-kerastase-bain-force-architecte-250-ml&docid=Fvk3PocZCYyuUM&tbnid=JtJ_86AoJVrdUM&vet=12ahUKEwiE2L_M_MGFAxVTR_EDHeQNANoQM3oECG0QAA..i&w=700&h=700&hcb=2&ved=2ahUKEwiE2L_M_MGFAxVTR_EDHeQNANoQM3oECG0QAA",
                            Name = "KERASTASE",
                            Price = 58.00m,
                            ProductCategoryId = 1,
                            StockQuantity = 9
                        },
                        new
                        {
                            Id = 4,
                            Details = "Права диамантена пила за нокти. Двустранна - едра и финна. Бяла пластмасова дръжка. Обща дължина: 9 см / 3.5 инча. Дължина острие: 5.5 см",
                            ImageUrl = "https://www.google.com/imgres?q=%D0%BF%D0%B8%D0%BB%D0%B0%20%D0%B7%D0%B0%20%D0%BD%D0%BE%D0%BA%D1%82%D0%B8&imgurl=https%3A%2F%2F2styrkela.com%2Fmedia%2Fcatalog%2Fproduct%2Fcache%2F1%2Fimage%2F9df78eab33525d08d6e5fb8d27136e95%2Fn%2Fi%2Fniegeloh-solingen_diamantena-pila-za-nokti_20421_3.jpg&imgrefurl=https%3A%2F%2F2styrkela.com%2Fpila-za-nokti-niegeloh-solingen-20421-13455.html&docid=ocZ1gRNnQXuHWM&tbnid=DijUBYehVscKSM&vet=12ahUKEwjzkJySgcKFAxVeBdsEHalVBbAQM3oECBUQAA..i&w=515&h=450&hcb=2&ved=2ahUKEwjzkJySgcKFAxVeBdsEHalVBbAQM3oECBUQAA",
                            Name = "Niegeloh Solingen",
                            Price = 5.60m,
                            ProductCategoryId = 5,
                            StockQuantity = 10
                        });
                });

            modelBuilder.Entity("IvysNails.Infrastructure.Data.Models.ProductCart", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("The current Product's Identifier");

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasComment("The current Cart's Identifier");

                    b.HasKey("ProductId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("ProductCarts");
                });

            modelBuilder.Entity("IvysNails.Infrastructure.Data.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The current Category's Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The Name of product category");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Шампоан"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Лак за коса"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Лак за нокти"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Боя за коса"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Пила за нокти"
                        });
                });

            modelBuilder.Entity("IvysNails.Infrastructure.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The current Service Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The name of the service");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The price of current service");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Лакиране с обикновен лак",
                            Price = 20.00m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Изграждане на нокти",
                            Price = 80.00m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Лакиране с гел лаk",
                            Price = 35.00m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Мъжки маникюр",
                            Price = 20.00m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Педикюр",
                            Price = 50.00m
                        },
                        new
                        {
                            Id = 6,
                            Name = "медицински педикюр",
                            Price = 80.00m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c2f14bf7-ffdd-47a4-90b3-f2309486fae9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d4e4949-3992-4eda-8ef4-c05e1e03ef3f",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIJfddgEFymUaTS0+SZIaeqcTSX6IYjHcGgq+5n1lZ3JpdZ3WlOkkbYiIr7u0+YaaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a568a66a-d5d8-40ef-8c81-41ef7a79cf48",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0d13875-3842-4861-9c60-62f5e9b1665b",
                            Email = "guest@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@GMAIL.COM",
                            NormalizedUserName = "GUEST@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL1u/JLtr9IsiepHIOBPgSs4tJEIlQJplcwFzrxfQfysXUNwiNxR8paSgvZkDEvPRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "25364add-0c08-4d74-b9ae-cdd431ac19a4",
                            TwoFactorEnabled = false,
                            UserName = "guest@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IvysNails.Infrastructure.Data.Models.Appointment", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Customers")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IvysNails.Infrastructure.Data.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("IvysNails.Infrastructure.Data.Models.Product", b =>
                {
                    b.HasOne("IvysNails.Infrastructure.Data.Models.ProductCategory", "ProductsCategories")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductsCategories");
                });

            modelBuilder.Entity("IvysNails.Infrastructure.Data.Models.ProductCart", b =>
                {
                    b.HasOne("IvysNails.Infrastructure.Data.Models.Cart", "Cart")
                        .WithMany("ProductsCarts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IvysNails.Infrastructure.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IvysNails.Infrastructure.Data.Models.Cart", b =>
                {
                    b.Navigation("ProductsCarts");
                });

            modelBuilder.Entity("IvysNails.Infrastructure.Data.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
